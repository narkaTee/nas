# vim: ft=nginx
{% if 'grafana' in container_proxy_routes | map(attribute="type") %}
map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}
{% endif %}

{% for route in container_proxy_routes %}
{% if route.type is defined and route.type == "pihole" %}
map $upstream_http_location $replace_location_{{ route.path.replace('/', '') }} {
	"" "";
	"/admin/" "/pihole/";
	"~^/(.*)$" "/pihole/$1";
	"~^(.*)$" "/pihole/$1";
}
{% endif %}
{% endfor %}

server {
	listen 80 default_server;
	listen [::]:80 default_server;
{% if container_proxy_ssl | default(false) %}
    listen 443 ssl;
    ssl_certificate {{ container_proxy_ssl_cert }};
    ssl_certificate_key {{ container_proxy_ssl_key }};
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
{% endif %}
	server_name _ {{ container_proxy_ssl_host | default("") }};

	root /var/www/html/;
	index index.html;

{% for route in container_proxy_routes %}
{% set _type = route.type | default("simple") %}
{% if _type == "simple" %}
	location {{ route.path }} {
		proxy_pass {{ route.backend }};
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_hide_header X-Frame-Options;
		proxy_set_header X-Frame-Options "SAMEORIGIN";
	}
{% elif _type == "pihole" %}
	location {{ route.path }} {
		proxy_pass {{ route.backend }};
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_hide_header X-Frame-Options;
		proxy_set_header X-Frame-Options "SAMEORIGIN";
		# we need to rewrite the location header pihole returns
		proxy_hide_header Location;
		add_header Location $replace_location_{{ route.path.replace('/', '') }};
	}
{% elif _type == "grafana" %}
	location {{ route.path.rstrip("/") }}/ {
		proxy_pass {{ route.backend }};
		proxy_set_header Host $host;
	}
	location {{ route.path.rstrip("/") }}/api/live/ {
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header Host $host;
		proxy_pass {{ route.backend }};
		rewrite  ^/grafana/(.*)  /$1 break;
	}
{% endif %}
{% endfor %}
}
